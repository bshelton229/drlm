#!/usr/bin/perl -w

# Author: Bryan Shelton, University Communications, University of Colorado Boulder
# License: MIT

use strict;
use File::Spec::Functions;
use File::Copy;
use Getopt::Long;
use Pod::Usage;
use Cwd 'abs_path', 'realpath', 'cwd';

## SET THE VERSION ##
my $VERSION = "0.1.2";


# ===================
# = Options Parsing =
# ===================

# Declare opt parse vars
my $cli_base = 0;
my $cli_version = 0;
my $cli_help = 0;
my $create_sites_default = 0;

## Usage documentation is at the end of this file ##

# Define command line options
GetOptions(
    'base=s' => \$cli_base,
    'version!' => \$cli_version,
    'help' => \$cli_help,
    'create-sites-default' => \$create_sites_default
);

# See if we need to print the version
if($cli_version) {
    print "drlm Version: $VERSION\n";
    exit(0);
}

# If --help print usage
pod2usage( { -verbose => 1, -exitval => 0 } ) if ( $cli_help );

# Get the remaining ARGV's as command and sub_command.
# After GetOptions parses its options we can test
# to see if we have a command and sub_command left.
my $command = (@ARGV) ? shift(@ARGV) : '';
my $sub_command = (@ARGV) ? shift(@ARGV) : '';

# Load the DRUPAL_BASE environment variable
my $base = '';
if($cli_base) {
    $base = $cli_base;
} else {
    $base = $ENV{'DRUPAL_BASE'};
}

# Make sure a base has been set
if(!$base) {
    print "You must tell drlm where the drupal base is:\nYou may either set the DRUPAL_BASE environment variable, or use the --base command line option.\n";
    exit(1);
}

$base = realpath($base);

# Check the base folder
if( !check_base($base) ) {
    printf "The base path %s doesn't exist or does not contain dists and cores folders\n", $base;
    exit(1);
}


# ============================================================
# = Evaluate $command and $sub_command and decide what to do =
# ============================================================

COMMAND: for ($command) {
    /cores/  && do { print_cores(); last COMMAND; };
    /dists/ && do { print_dists(); last COMMAND; };
    /site/ && do {
        SITE_COMMAND: for ($sub_command) {
            /new/ && do { site_new(); last SITE_COMMAND; };
            /switch-core/ && do { switch_core(); last SITE_COMMAND; };
            /switch-dist/ && do { switch_dist(); last SITE_COMMAND; };
            /switch/ && do { switch_core(); switch_dist(); last SITE_COMMAND; };
            do { site_info(); };
        };
    last COMMAND; };
    do { pod2usage( -verbose => 1 ); };
}

# =====================
# = Command Functions =
# =====================

# Returns an array of cores
sub cores {
    my @dirlist = dirlist(catdir($base, "cores"));
    return @dirlist;
}

# Returns an array of sites
sub dists {
    my @dirlist = dirlist(catdir($base, "dists"));
    return @dirlist;
}

# Print the cores
sub print_cores {
    my @cores = cores();
    foreach my $f (@cores) { print $f . "\n"; }
}

# Print the dists
sub print_dists {
    my @dists = dists();
    foreach my $f (@dists) { print $f . "\n"; }
}

# Returns information for a particular site
sub site_info {
    my $cwd = cwd();
    if(is_drupal_base($cwd)) {
        my $core = first_link_basename($cwd);
        my $dist = first_link_name(File::Spec->catfile($cwd, 'sites'));
        print "Site: $core ($dist)\n";
    } else {
        printf "%s is not a drupal site folder\n", $cwd;
        exit(1);
    }
}

# Create a new site
# @dest = destination directory for the new site
sub site_new {
    if(!scalar(@ARGV) >= 1) {
        print "Please supply site destination\n";
        exit(1);
    } else {
        # Pull our site destination
        my $dest = shift(@ARGV);
        # Try to load the core and dist from ARGV, if they aren't set here
        # the user will be prompted interactively
        my $core = shift(@ARGV);
        my $dist = shift(@ARGV);
        
        # Check the destination
        $dest = realpath($dest);
        my $dest_sites = File::Spec->catfile($dest, 'sites');
        
        # Validate the destination path, if it exists, bail
        if(-x $dest && !dir_is_empty($dest)) {
            printf "%s already exists and is not empty\n", $dest;
            exit(1);
        }
        
        # Load core and dist, the subs continue asking until you
        # give a valid answer
        if(!$core) { $core = choose_core(); }
        if(!$dist) { $dist = choose_dist($core); }
        
        # Check core and dist
        # Uses our in_array from helpers, and pulls the cores and dists from
        # our functions.
        if(!in_array(cores(), $core) || !in_array(dists(), $dist)) {
            print "Invalid core or dist\n";
            exit(1);
        }
        
        # Get the paths for the core and dist chosen
        my $core_path = File::Spec->catfile($base, 'cores', $core);
        my $dist_path = File::Spec->catfile($base, 'dists', $dist);
        my $core_rel = File::Spec->abs2rel($core_path, $dest);
        # This one is realtive from the sites folder in dest
        my $dist_rel = File::Spec->abs2rel($dist_path, $dest_sites);
        
        # Make our two directories
        mkdir($dest);
        mkdir($dest_sites);
        
        # Create the sites all folder linked to the dist chosen
        symlink($dist_rel, File::Spec->catfile($dest_sites, 'all'));
        
        # Open the core path to walk through the files in the directory
        # relatively link all of them, except sites, to the dest dir
        opendir(DIR,$core_path);
        my @core_files = readdir(DIR);
        foreach my $f (@core_files) {
            # Make sure we aren't the dir stuff and ignore the sites folder
            if($f ne '.' && $f ne '..' && $f ne 'sites') {
                my $tmp_rel = File::Spec->abs2rel("$core_path/$f", "$dest/");
                symlink($tmp_rel, $dest . "/$f");
            }
        }
        closedir(DIR);
        
        # Create sites/default stuff
        if($create_sites_default) {
            my $new_sites_default_folder = File::Spec->catfile($dest, 'sites', 'default');
            mkdir( $new_sites_default_folder );
            mkdir( $new_sites_default_folder . "/files" );
            copy( "$core_path/sites/default/default.settings.php", "$new_sites_default_folder/default.settings.php" );            
        }   
    }
}

# Switch the drupal core of a site folder
sub switch_core {
    my $dest = realpath(Cwd->cwd());

    # Make sure we already have a drupal base
    if(!is_drupal_base($dest)) { 
        print "You are not in a drupal base folder\n";
        exit(1);
    }
    
    # Try to load the core from ARGV, if they aren't set here
    # the user will be prompted interactively
    my $core = shift(@ARGV);
    
    # What core are we currently on
    my $current_core = first_link_basename($dest);
    # Get a core and set some paths
    if(!$core) { $core = choose_core(); }
    # Validate the core
    if(!in_array(cores(), $core)) {
        print "Invalid core\n";
        exit(1);
    }
    my $core_path = File::Spec->catfile($base, 'cores', $core);

    # First remove all links
    remove_all_links($dest);

    # Iterate through the new core and create links in the destination folder
    opendir(DIR,$core_path);
    my @core_files = readdir(DIR);
    foreach my $f (@core_files) {
        # Make sure we aren't the dir stuff and ignore the sites folder
        if($f ne '.' && $f ne '..' && $f ne 'sites') {
            my $tmp_rel = File::Spec->abs2rel("$core_path/$f", "$dest/");
            # This should not be necessary, yet here it is, just in case
            if(-e "$dest/$f") { unlink("$dest/$f"); }
            #print "Linking: $dest/$f\n";
            symlink($tmp_rel, "$dest/$f");
        }
    }
    closedir(DIR);
}


# Switch the drupal dist of a site folder
sub switch_dist {
    my $dest = realpath(Cwd->cwd());
    # Try to load the dist from ARGV, if they aren't set here
    # the user will be prompted interactively
    my $dist = shift(@ARGV);
    
    my $link_dest = File::Spec->catfile($dest, 'sites');
    
    # Make sure we already have a drupal base
    if(!is_drupal_base($dest)) { 
        print "You are not in a drupal base folder\n";
        exit(1);
    }

    # What core are we currently on, this will be used as the filter
    my $current_core = first_link_basename($dest);

    # Pick a new dist using the current core as the filter
    if(!$dist) { $dist = choose_dist($current_core); }

    if(!in_array(dists(), $dist)) {
        print "Invalid dist\n";
        exit(1);
    }
    
    ## TODO: Validate the chosen dist with the current core version
    
    # Set the full path to the distribution source
    my $dist_path = File::Spec->catfile($base, 'dists', $dist);

    # Sites/all sholud be a link, if so, remove it
    if(readlink("$link_dest/all")) { unlink("$link_dest/all"); }
    
    # Find the relative path and link it
    my $rel_link = File::Spec->abs2rel($dist_path, $link_dest);
    # Create the symlink
    symlink($rel_link, "$link_dest/all");
}

# ===========
# = Helpers =
# ===========

# Returns an array of files in a directory.
# @dir = directory to return the list for
sub dirlist {
    # Validate this
    my $dir = shift(@_);
    my @out = ();
    my @dir = glob(canonpath($dir) . "/*");
    foreach my $f (@dir) {
        (my $v, my $d, my $f) = File::Spec->splitpath($f);
        push(@out, $f);
    }
    return @out;
}


# Returns the basename of the first link found
sub first_link_basename {
    my $path = canonpath(shift(@_));
    if(!-d $path) { print "nope"; return 0; }
    my @dirlist = glob($path . "/*");
    foreach my $f (@dirlist) {
        if(readlink($f)) {
            my $link = readlink($f);
            my $abs = File::Spec->rel2abs($link, $path);
            my $real_path = canonpath(realpath($abs));
            
            # Parse the path into volume, directory, and filename
            (my $v, my $d, my $filename) = File::Spec->splitpath($real_path);
        
            # Split the directory path
            # canonpath will remove the trailing /
            my @dir_chunks = File::Spec->splitdir(canonpath($d));
            # Return the basename of the containing directory
            return $dir_chunks[-1];
        }
    }
    # Default to returning false
    return 0;
}

# Returns the filename (last path name) of the first link found
sub first_link_name {
    my $path = canonpath(shift(@_));
    if(!-d $path) { print "nope"; return 0; }
    my @dirlist = glob($path . "/*");
    foreach my $f (@dirlist) {
        if(readlink($f)) {
            my $link = readlink($f);
            my $abs = File::Spec->rel2abs($link, $path);
            my $real_path = canonpath(realpath($abs));
            # Cores and Dists should be directories
            next if(!-d $real_path);
            (my $v, my $d, my $filename) = File::Spec->splitpath($real_path);
            # Return the filename, which will actually be the directory name
            return $filename;
        }
    }
    return 0;
}

# is_drupal_base will check for certain attributes to determine if the base folder
# is a drupal core
# @path - Directory to check
sub is_drupal_base {
    my $path = canonpath(shift(@_));
    $path = realpath($path);
    # Default to passing, see if we can knock it down
    my $check = 1;
    # Is there an .htaccess file
    if(!-f File::Spec->catfile($path, '.htaccess')) { $check = 0; }
    # Drupal 6x and 7x contain a CHANGELOG.txt file in their root
    if(!-f File::Spec->catfile($path, 'CHANGELOG.txt')) { $check = 0; }
    # It should have a sites folder
    if(!-d File::Spec->catfile($path, 'sites')) { $check = 0; }
    # It should have a modules folder
    if(!-d File::Spec->catfile($path, 'modules')) { $check = 0; }
    return $check;
}

# Check drupal_base
# Make sure it at least contains dists and cores directories
sub check_base {
    my $check_base = shift;
    if(-d "$check_base/dists" && -d "$check_base/cores") {
        return 1;
    } else {
        return 0;
    }
}

# Choose a core
# Returns a core string or false
sub choose_core {
    my @cores = cores($base);
    
    for(my $i=0; defined $cores[$i]; $i++) {
        my $core_name = $cores[$i];
        print $i + 1 . ". $core_name\n";
    }

    print "Please chose a core: ";
    my $return = <>;
    if(is_int($return) && $cores[int($return)-1]) {
        return $cores[int($return)-1];
    } else {
        print "You made an invalid choice.\n";
        exit(100);
    }
}

# Choose a distribution
# Returns a distribution string or false
sub choose_dist {

    # If a filter argument is passed in
    # parse the version number out of it.
    # The filter expects something like drupal-6.20, or drupal-7.0
    my $filter = shift(@_);
    my $version_check = '';

    # See if we're filtering dists by major version
    if($filter) {
        # Search for the version in the string, should be in the format
        # drupal-7.123 (we would get 7 back from that example)
        # Someone may want to check over this regex, but this should work into
        # version 10+
        if ( my @version_match = ($filter =~ m/-(\d+)\./g) ) {
            $version_check = $version_match[0];
        }
    }
    
    # Get a list of our dists
    my @dists = dists($base);
    
    # If we have a version from filter, splice anything
    # not beginning with that version number out of the possible
    # dists returned
    if($version_check) {
        # Only include versions that start with the version we're filtering for
        @dists = grep {$_ =~ m/^$version_check/ } @dists;
    }

    # Present the dist list to the user and get a response
    for(my $i=0; defined $dists[$i]; $i++) {
        my $dist_name = $dists[$i];
        print $i + 1 . ". $dist_name\n";
    }

    print "Please chose a distribution: ";
    my $return = <>;
    if(is_int($return) && $dists[int($return)-1]) {
        return $dists[int($return)-1];
    } else {
        print "You made an invalid choice.\n";
        exit(100);
    }
}

# Remove all links in a directory
# @dir to remove all links from
sub remove_all_links {
    my $dir = shift(@_);
    opendir(DIR,$dir);
    my @files = readdir(DIR);
    foreach my $f (@files) {
        # Make sure we aren't the dir stuff and ignore the sites folder
        if(readlink($f)) { unlink($f); }
    }
    closedir(DIR);
}

# ===================
# = For Convenience =
# ===================

# Determines if something is an integer
# Returns a boolean
sub is_int {
  my $val = shift;
  return ($val =~ m/^\d+$/);
}

# Determine if an item is in an array. It probably wont check type very well, this script will
# only use it to check for strings in an array
# use: in_array(@names, 'bryan');
# returns a boolean
sub in_array {
    my $check_for = pop;
    my @array_to_check = @_;
    # Return true if we find the value in the array
    return 1 if( grep { $_ =~ m/$check_for/ } @array_to_check );
    # Default to returning false
    return 0;
}

# Determine whether a directory is empty
# user dir_is_empty("/tmp");
# returns boolean
sub dir_is_empty {
    my ($path) = @_;
    opendir DIR, $path;
    while(my $entry = readdir DIR) {
        # . and .. are always going to be there
        next if($entry =~ /^\.\.?$/);
        closedir DIR;
        return 0;
    }
    closedir DIR;
    return 1;

}

__END__

=head1 NAME

drlm commands

=head1 SYNOPSIS

drlm COMMAND [--base] [--help] [--version] [--create-sites-default]

=head1 DESCRIPTION

Our Description

=head1 OPTIONS

=item --help

Print this message

=item --base

Define the location of the base folder containg the Drupal cores and your dists

=item --version

Prints the drlm version

=item --create-sites-default

When set, site new ./dest will create the sites/default folder with default.settings.php in it and an emptpy files folder.

=cut
